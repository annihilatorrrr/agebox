// Code generated by mockery v2.46.2. DO NOT EDIT.

package storagemock

import (
	context "context"

	model "github.com/slok/agebox/internal/model"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/slok/agebox/internal/storage"
)

// KeyRepository is an autogenerated mock type for the KeyRepository type
type KeyRepository struct {
	mock.Mock
}

// GetPrivateKey provides a mock function with given fields: ctx
func (_m *KeyRepository) GetPrivateKey(ctx context.Context) (model.PrivateKey, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateKey")
	}

	var r0 model.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.PrivateKey, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.PrivateKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrivateKeys provides a mock function with given fields: ctx
func (_m *KeyRepository) ListPrivateKeys(ctx context.Context) (*storage.PrivateKeyList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateKeys")
	}

	var r0 *storage.PrivateKeyList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*storage.PrivateKeyList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *storage.PrivateKeyList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.PrivateKeyList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPublicKeys provides a mock function with given fields: ctx
func (_m *KeyRepository) ListPublicKeys(ctx context.Context) (*storage.PublicKeyList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPublicKeys")
	}

	var r0 *storage.PublicKeyList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*storage.PublicKeyList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *storage.PublicKeyList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.PublicKeyList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeyRepository creates a new instance of KeyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyRepository {
	mock := &KeyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
