// Code generated by mockery v2.46.2. DO NOT EDIT.

package storagemock

import (
	context "context"

	model "github.com/slok/agebox/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// SecretRepository is an autogenerated mock type for the SecretRepository type
type SecretRepository struct {
	mock.Mock
}

// DeleteDecryptedSecret provides a mock function with given fields: ctx, id
func (_m *SecretRepository) DeleteDecryptedSecret(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDecryptedSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEncryptedSecret provides a mock function with given fields: ctx, id
func (_m *SecretRepository) DeleteEncryptedSecret(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEncryptedSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsDecryptedSecret provides a mock function with given fields: ctx, id
func (_m *SecretRepository) ExistsDecryptedSecret(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsDecryptedSecret")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsEncryptedSecret provides a mock function with given fields: ctx, id
func (_m *SecretRepository) ExistsEncryptedSecret(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsEncryptedSecret")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDecryptedSecret provides a mock function with given fields: ctx, id
func (_m *SecretRepository) GetDecryptedSecret(ctx context.Context, id string) (*model.Secret, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDecryptedSecret")
	}

	var r0 *model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Secret, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Secret); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEncryptedSecret provides a mock function with given fields: ctx, id
func (_m *SecretRepository) GetEncryptedSecret(ctx context.Context, id string) (*model.Secret, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEncryptedSecret")
	}

	var r0 *model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Secret, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Secret); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDecryptedSecret provides a mock function with given fields: ctx, secret
func (_m *SecretRepository) SaveDecryptedSecret(ctx context.Context, secret model.Secret) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for SaveDecryptedSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveEncryptedSecret provides a mock function with given fields: ctx, secret
func (_m *SecretRepository) SaveEncryptedSecret(ctx context.Context, secret model.Secret) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for SaveEncryptedSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSecretRepository creates a new instance of SecretRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretRepository {
	mock := &SecretRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
